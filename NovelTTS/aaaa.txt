import SwiftUI
import UniformTypeIdentifiers
import PDFKit
import AVFoundation
import UIKit
import MediaPlayer

// PDF document model
struct PDFDocumentItem: Identifiable {
    let id = UUID()
    let url: URL
    
    var title: String {
        url.deletingPathExtension().lastPathComponent
    }
}

struct PDFDocumentItemData: Codable {
    let url: String
}

// Text-to-Speech manager
@MainActor
class TTSManager: NSObject, ObservableObject, AVSpeechSynthesizerDelegate {
    let speechSynth = AVSpeechSynthesizer()
    private var backgroundTask: UIBackgroundTaskIdentifier = .invalid

    @Published var highlightedRange: NSRange = NSRange(location: NSNotFound, length: 0)
    @Published var isSpeaking: Bool = false
    var didFinishUtterance: (() -> Void)?

    override init() {
        super.init()
        speechSynth.delegate = self
        setupRemoteCommandCenter()
    }

    private func setupRemoteCommandCenter() {
        let commandCenter = MPRemoteCommandCenter.shared()
        commandCenter.pauseCommand.isEnabled = true
        commandCenter.pauseCommand.addTarget { [weak self] _ in
            self?.pause()
            return .success
        }
        commandCenter.playCommand.isEnabled = true
        commandCenter.playCommand.addTarget { [weak self] _ in
            self?.resume()
            return .success
        }
    }

    func updateNowPlayingInfo(title: String, artwork: UIImage?) {
        var nowPlayingInfo: [String: Any] = [MPMediaItemPropertyTitle: title]
        if let image = artwork {
            let art = MPMediaItemArtwork(boundsSize: image.size) { _ in image }
            nowPlayingInfo[MPMediaItemPropertyArtwork] = art
        }
        MPNowPlayingInfoCenter.default().nowPlayingInfo = nowPlayingInfo
    }

    func speak(text: String) {
        if speechSynth.isSpeaking {
            speechSynth.stopSpeaking(at: .immediate)
        }
        let utterance = AVSpeechUtterance(string: text)
        utterance.voice = AVSpeechSynthesisVoice(language: "en-US")
        utterance.rate = AVSpeechUtteranceDefaultSpeechRate

        speechSynth.speak(utterance)
        isSpeaking = true
        registerBackgroundTask()
    }

    func pause() {
        if speechSynth.isSpeaking {
            speechSynth.pauseSpeaking(at: .word)
            isSpeaking = false
        }
    }

    func stop() {
        speechSynth.stopSpeaking(at: .immediate)
        isSpeaking = false
        highlightedRange = NSRange(location: NSNotFound, length: 0)
    }

    func resume() {
        if speechSynth.isPaused {
            speechSynth.continueSpeaking()
            isSpeaking = true
        }
    }

    private func registerBackgroundTask() {
        endBackgroundTask()
        backgroundTask = UIApplication.shared.beginBackgroundTask(withName: "TTS") {
            self.endBackgroundTask()
        }
    }

    private func endBackgroundTask() {
        if backgroundTask != .invalid {
            UIApplication.shared.endBackgroundTask(backgroundTask)
            backgroundTask = .invalid
        }
    }

    nonisolated func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didFinish utterance: AVSpeechUtterance) {
        Task { @MainActor in
            self.endBackgroundTask()
            self.isSpeaking = false
            self.didFinishUtterance?()
        }
    }

    nonisolated func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer,
                                       willSpeakRangeOfSpeechString characterRange: NSRange,
                                       utterance: AVSpeechUtterance) {
        Task { @MainActor in
            self.highlightedRange = characterRange
        }
    }
}

// Main content view
struct ContentView: View {
    @State private var pdfURL: URL? = nil
    @State private var pdfDocument: PDFDocument?
    @State private var extractedText: String = ""
    @State private var showingFileImporter = false
    @State private var currentPageIndex: Int = 0
    @AppStorage("isDarkMode") private var isDarkMode: Bool = false
    @State private var showMainMenu = true
    @State private var showSettings = false
    @State private var showPageInput = false
    @State private var inputPageNumber: String = ""
    @State private var catalog: [PDFDocumentItem] = []

    @StateObject private var ttsManager = TTSManager()

    init() {
        _catalog = State(initialValue: ContentView.loadCatalog())
    }

    private var totalPageCount: Int {
        pdfDocument?.pageCount ?? 0
    }

    private var highlightedText: AttributedString {
        var attrText = AttributedString(extractedText)
        let range = ttsManager.highlightedRange
        if let stringRange = Range(range, in: extractedText),
           let startIdx = AttributedString.Index(stringRange.lowerBound, within: attrText),
           let endIdx = AttributedString.Index(stringRange.upperBound, within: attrText) {
            attrText[startIdx..<endIdx].backgroundColor = .yellow
        }
        return attrText
    }

    var body: some View {
        VStack(spacing: 16) {
            topBar
            if showMainMenu {
                catalogView
            } else {
                pdfViewer
            }
            Spacer()
        }
        .fileImporter(isPresented: $showingFileImporter, allowedContentTypes: [.pdf]) { result in
            if let selectedURL = try? result.get() {
                addToCatalog(url: selectedURL)
                loadPdf(from: selectedURL)
            }
        }
        .background(isDarkMode ? Color.black : Color.white)
        .sheet(isPresented: $showSettings) {
            SettingsView(isDarkMode: $isDarkMode, factoryReset: resetSettings)
                .background(isDarkMode ? Color.black : Color.white)
        }
        .alert(isPresented: $showPageInput) {
            Alert(
                title: Text("Go to Page"),
                message: Text("Enter page number"),
                primaryButton: .default(Text("Go")) {
                    if let pageNumber = Int(inputPageNumber),
                       pageNumber > 0,
                       pageNumber <= totalPageCount {
                        goToPage(pageNumber - 1)
                    }
                    inputPageNumber = ""
                },
                secondaryButton: .cancel {
                    inputPageNumber = ""
                }
            )
        }
        .onAppear {
            configureAudioSession()
            ttsManager.didFinishUtterance = didFinishUtterance
        }
        .edgesIgnoringSafeArea([.bottom])
    }

    // Place top bar below system status bar
    private var topBar: some View {
        HStack {
            Text("NovelTTS")
                .font(.title2)
                .foregroundColor(isDarkMode ? .white : .black)
                .padding(.leading)
            Spacer()
            Button(action: resetView) {
                Image(systemName: "xmark")
                    .foregroundColor(isDarkMode ? .white : .black)
            }
            .padding(.trailing)
            Button(action: { showSettings.toggle() }) {
                Image(systemName: "gearshape.fill")
                    .foregroundColor(isDarkMode ? .white : .black)
            }
            .padding(.trailing)
        }
        .padding(.top, getSafeAreaInsets()?.top ?? 20)
        .background(isDarkMode ? Color.black : Color.white)
    }

    // Catalog displays one PDF per row with a delete (bin) button and a plus button to add a new PDF.
    private var catalogView: some View {
        ScrollView {
            LazyVStack(spacing: 10) {
                ForEach(catalog) { item in
                    HStack {
                        Button(action: {
                            loadPdf(from: item.url)
                        }) {
                            Text(item.title)
                                .foregroundColor(isDarkMode ? .white : .black)
                        }
                        Spacer()
                        Button(action: {
                            deleteFromCatalog(item: item)
                        }) {
                            Image(systemName: "trash")
                                .foregroundColor(.red)
                        }
                    }
                    .padding(.horizontal)
                }
            }
            .padding(.top)
        }
        .background(isDarkMode ? Color.black : Color.white)
        .overlay(
            HStack {
                Spacer()
                VStack {
                    Spacer()
                    Button(action: { showingFileImporter = true }) {
                        Image(systemName: "plus.circle.fill")
                            .resizable()
                            .frame(width: 50, height: 50)
                            .foregroundColor(.purple)
                            .padding()
                    }
                }
            }
        )
    }
    
    private var pdfViewer: some View {
        VStack {
            if let fileURL = pdfURL {
                Text("PDF selected: \(fileURL.deletingPathExtension().lastPathComponent)")
                    .font(.headline)
                    .foregroundColor(isDarkMode ? .white : .black)
                if totalPageCount > 0 {
                    Button(action: { showPageInput = true }) {
                        Text("Page \(currentPageIndex + 1) of \(totalPageCount)")
                            .font(.subheadline)
                            .foregroundColor(isDarkMode ? .white : .black)
                    }
                    ScrollView {
                        Text(highlightedText)
                            .padding()
                            .background(isDarkMode ? Color.black : Color.white)
                            .foregroundColor(isDarkMode ? .white : .black)
                    }
                    .frame(maxHeight: 300)
                    controlButtons
                } else {
                    Text("This PDF has no pages or failed to load.")
                        .font(.subheadline)
                        .foregroundColor(isDarkMode ? .white : .black)
                }
            } else {
                Text("No PDF file selected.")
                    .font(.subheadline)
                    .foregroundColor(isDarkMode ? .white : .black)
            }
        }
    }
    
    private var controlButtons: some View {
        HStack(spacing: 40) {
            Button(action: goToPreviousPage) {
                Image(systemName: "arrow.left")
                    .resizable()
                    .frame(width: 50, height: 50)
                    .foregroundColor(isDarkMode ? .white : .black)
            }
            .disabled(currentPageIndex == 0)
            
            Button(action: togglePlayPause) {
                Image(systemName: ttsManager.isSpeaking ? "pause.fill" : "play.fill")
                    .resizable()
                    .frame(width: 50, height: 50)
                    .foregroundColor(isDarkMode ? .white : .black)
            }
            
            Button(action: goToNextPage) {
                Image(systemName: "arrow.right")
                    .resizable()
                    .frame(width: 50, height: 50)
                    .foregroundColor(isDarkMode ? .white : .black)
            }
            .disabled(currentPageIndex >= totalPageCount - 1)
        }
    }

    private func resetView() {
        showMainMenu = true
        pdfURL = nil
        pdfDocument = nil
        extractedText = ""
        ttsManager.stop()
    }
    
    private func loadPdf(from url: URL) {
        pdfURL = url
        showMainMenu = false
        currentPageIndex = 0
        extractedText = ""
        
        guard url.startAccessingSecurityScopedResource() else { return }
        defer { url.stopAccessingSecurityScopedResource() }
        
        if let document = PDFDocument(url: url) {
            pdfDocument = document
            extractTextForCurrentPage()
            if let firstPage = document.page(at: 0) {
                let thumbnail = firstPage.thumbnail(of: CGSize(width: 300, height: 300), for: .cropBox)
                ttsManager.updateNowPlayingInfo(title: url.lastPathComponent, artwork: thumbnail)
            } else {
                ttsManager.updateNowPlayingInfo(title: url.lastPathComponent, artwork: nil)
            }
        } else {
            extractedText = "Unable to open PDF document."
        }
    }
    
    private func extractTextForCurrentPage() {
        guard let document = pdfDocument,
              let page = document.page(at: currentPageIndex) else {
            extractedText = "Unable to extract page."
            return
        }
        DispatchQueue.global(qos: .userInitiated).async {
            let pageText = page.string ?? "No text could be extracted from this page."
            DispatchQueue.main.async {
                extractedText = pageText
                ttsManager.highlightedRange = NSRange(location: NSNotFound, length: 0)
            }
        }
    }
    
    private func configureAudioSession() {
        let audioSession = AVAudioSession.sharedInstance()
        do {
            try audioSession.setCategory(.playback, mode: .default)
            try audioSession.setActive(true)
        } catch {
            print("Audio session configuration failed: \(error.localizedDescription)")
        }
    }
    
    private func didFinishUtterance() {
        if currentPageIndex < totalPageCount - 1 {
            currentPageIndex += 1
            extractTextForCurrentPage()
        }
    }
    
    private func togglePlayPause() {
        if ttsManager.isSpeaking {
            ttsManager.pause()
        } else {
            ttsManager.highlightedRange = NSRange(location: NSNotFound, length: 0)
            ttsManager.speak(text: extractedText)
        }
    }
    
    private func goToPreviousPage() {
        guard currentPageIndex > 0 else { return }
        ttsManager.stop()
        currentPageIndex -= 1
        extractTextForCurrentPage()
    }
    
    private func goToNextPage() {
        guard currentPageIndex < totalPageCount - 1 else { return }
        ttsManager.stop()
        currentPageIndex += 1
        extractTextForCurrentPage()
    }
    
    private func goToPage(_ pageIndex: Int) {
        guard pageIndex >= 0 && pageIndex < totalPageCount else { return }
        ttsManager.stop()
        currentPageIndex = pageIndex
        extractTextForCurrentPage()
    }
    
    private func addToCatalog(url: URL) {
        let item = PDFDocumentItem(url: url)
        catalog.append(item)
        saveCatalog()
    }
    
    private func deleteFromCatalog(item: PDFDocumentItem) {
        catalog.removeAll { $0.id == item.id }
        saveCatalog()
    }
    
    private func saveCatalog() {
        let catalogsData = catalog.map { PDFDocumentItemData(url: $0.url.absoluteString) }
        if let data = try? JSONEncoder().encode(catalogsData) {
            UserDefaults.standard.set(data, forKey: "catalog")
        }
    }
    
    private static func loadCatalog() -> [PDFDocumentItem] {
        guard let data = UserDefaults.standard.data(forKey: "catalog"),
              let catalogsData = try? JSONDecoder().decode([PDFDocumentItemData].self, from: data) else {
            return []
        }
        return catalogsData.compactMap { itemData in
            guard let url = URL(string: itemData.url) else { return nil }
            return PDFDocumentItem(url: url)
        }
    }
    
    private func resetSettings() {
        isDarkMode = false
        catalog.removeAll()
        UserDefaults.standard.removeObject(forKey: "catalog")
    }
    
    private func getSafeAreaInsets() -> UIEdgeInsets? {
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first {
            return window.safeAreaInsets
        }
        return nil
    }
}

// Settings view
struct SettingsView: View {
    @Binding var isDarkMode: Bool
    var factoryReset: () -> Void

    var body: some View {
        VStack {
            Toggle("Dark Mode", isOn: $isDarkMode)
                .padding()
                .foregroundColor(isDarkMode ? .white : .black)
            Button(action: factoryReset) {
                Text("Factory Reset")
                    .foregroundColor(.red)
                    .padding()
            }
            Spacer()
            VStack {
                Text("Gabriele Pernoca")
                    .font(.headline)
                    .foregroundColor(isDarkMode ? .white : .black)
                    .padding()
                Text("All rights reserved.")
                    .font(.subheadline)
                    .foregroundColor(isDarkMode ? .white : .black)
                    .padding()
            }
        }
        .background(isDarkMode ? Color.black : Color.white)
    }
}

// License view
struct LicenseView: View {
    var body: some View {
        VStack {
            Text("License")
                .font(.title)
                .padding()
            Text("Gabriele Pernoca")
                .font(.headline)
                .padding()
            Text("All rights reserved.")
                .font(.subheadline)
                .padding()
            Spacer()
        }
        .padding()
    }
}
